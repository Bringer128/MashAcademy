#!/usr/bin/env node

// @note -----
// Please understand, this code was created by an amature. My team mates are much
// better coders than me, but their skills were needed elsewhere. If you find errors,
// feel free to let me know so that I can improve! -@d0vr

/**************
 *  Requires  *
 *************/

// Config data
var conf = require('./../config');

// @DEBUG  @todo add err catching
	if (conf.debug) console.log('DEBUG: Config Settings Set'); // Any problems w/Config settings?

// Node Modules
var fs 		= require('fs'); 						// Filesystem
var ftp 	= require('ftp');						// Connect to BOM FTP server
var c2jconv	= require("csvtojson").core.Converter;  // Enable BOM CSV to JSON

// @DEBUG // @todo Add err catching
	if (conf.debug) console.log('DEBUG: Required Modules Loaded'); // Did these modules load w/o problem?

/**************
 * Functions  *
 *************/


// Retreive needed locations from filesystem
// @todo upgrade to using database

function getLocations() { location = JSON.parse(fs.readFileSync('models/locations', 'utf8')); }

// Retreive needed dataTypes from filesystem
// @todo upgrade to using database

function getDataTypes() { 
	// create measured variables
	v = {
		'maxT':{
			'file':'max-temp.json',
			'data':{}
		},
		'minT':{
			'file':'min-temp.json',
			'data':{}
		},
		'maxH':{
			'file':'max-hum.json',
			'data':{}
		},
		'minH':{
			'file':'max-hum.json',
			'data':{}
		},
		'rain':{
			'file':'rain.json',
			'data':{}
		},
		'solar':{
				'file':'solar.json',
			'data':{}
		},
		'wind':{
			'file':'wind.json',
			'data':{}
		}
	}
}


/********************
 * Generate Master JSON folder for use in main app
 *
 */

function generateMasterJSON() {
	// Create script to collate information and save to disk.
}


/********************
 * Processing JSON Data
 *
 * @param <string> act
 * What action is being performed? <default="load">
 */

function jsonData(act) {
	if(typeof(act)==='undefined') act = 'load'; // Set default @param if blank
	
	// Generate 'live' json objects of existing data
	if (act=='load') {
		for (var i in v) {
			// @todo add error handling
			v[i].data = JSON.parse(fs.readFileSync(conf.dir.data+'json/'+v[i].file, 'utf8'));
		}

	// Save modified json objects to storage
	} else if (act=='save') {
		for (var i in v) {
			// @todo add error handling
			fs.writeFile(conf.dir.data+'json/'+v[i].file, JSON.stringify(v[i].data), function(err) {
				if(err) { console.log(err); }
			}); 
		}	

	// Create master.json object and save to storage
	} else if (act=='parse') { generateMasterJSON();

	// If no 'act' @param defined, die horribly
	} else {
		console.log('ERROR! function(jsonData) \'act\' @param not set');
	}
}


/********************
 * Init FTP Connection and cvs2json convertor
 */

function initFTP() {
	// Create FTP connection //
	bom = new ftp();
	// Prepare cvs2json Convertor //
	var param = {}; // Use plugins default settings
	c2j = new c2jconv(param);
}

/********************
 * BOM CSV to JSON
 *
 * returns object from csv data
 *
 */

function bom2json(data) {

}

/********************
 * Get FTP Data
 */

function getFtp () {
bom.on('ready', function() {
	bom.get(conf.d.tp+conf.d.tf, function(err, stream) {
	if (err) throw err;
		stream.once('close', function() { bom.end(); });
		stream.pipe(fs.createWriteStream('tmp'));
		fs.readFile('tmp', 'utf8', function (err,data) {
  		if (err) return console.log(err);
  			data = data.split('(MJ/sq m)');
  			data = data[1].split('Totals:');
  			data = data[0].replace(/\//g,'-');
  			data = "location,date,trans,rain,evap,max,min,humid-max,humid-min,wind,solar"+data;
  			fs.writeFile("tmp", data, function(err) {
				if(err) console.log(err);
			}); 

			//end_parsed will be emitted once parsing finished
			c2j.on("end_parsed",function(jsonObj){
			   console.log(jsonObj); //here is your result json object
			});

			//read from file
			var fileStream = fs.createReadStream('tmp');
			fileStream.pipe(c2j);
  			
			// Do something with the json object

		});
	});
});

}

/********************
 * We need locations, datatypes and data!
 *
 */

function init() {
	getLocations();		// Get Weather Stn locations
	getDataTypes();		// Get Data Types
	jsonData('load');	// Load current data
	initFTP();
}

/********************
 * What is done once, after the first init?
 *
 */

function initRun() {
	
	for (var loc in location) {
		console.log(location[loc].stnName);
	}
}

/********************
 * Clean up and automatic save
 *
 * @param <boolean> save
 * Should the function save the live json data? <default=true>
 *
 * @todo Set up an exit function when this script is able to run as a service
 */

function clean(save) {
	// Santise data here? Dunno.
	jsonData('save');
	// jsonData('parse');
	//Delete the scripts cache
}

/********************
 * Function to exit the service gracefully (i.e., if run as a service through forever or alike)
 *
 * @todo Set up an exit function when this script is able to run as a service !! Not important for MVP atm
 */

function exit() {
	clean();
	// @todo Die gracefully.
}


/**************
 *  Runtime   *
 *************/

/******* Variables ********/
var bom;
var c2j;
var location;
var v;

/******* Functions ********/
init(); // Get locations and existing data
initRun(); // Establish FTP connection and update data

exit(); // Clean up loose ends and tmp file etc. Save json data
// @todo Change to clean(); when able to run script as a service


/**************
 *  Snippets  *
 *************/



for (var i in v) {
	console.log(v[i].data);
}

// This is how to get date in number format!!
// var date = Date.parse("2014-07-12");


/******* UPDATE DATA FROM FTP *********/

/*

// connect to BOM FTP server using config credentials
bom.connect(BOMconfig);
bom.on('end', function() {
	console.log('That\'s all folks!');
});

*/


